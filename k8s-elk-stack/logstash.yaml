---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
  namespace: elastic-system
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
  logstash.conf: |
    # all input will come from filebeat, no local logs
    input {
      beats {
        port => 5042
      }
    }
    filter {
    }
    output {
      elasticsearch {
        index => "logstash-%{[@metadata][beat]}"
        hosts => [ "${ES_HOSTS}" ]
        user => "${ES_USER}"
        password => "${ES_PASSWORD}"
        cacert => '/etc/logstash/certificates/ca.crt'
      }
    }
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: logstash
  name: logstash
  namespace: elastic-system
spec:
  containers:
  - image: docker.elastic.co/logstash/logstash:7.8.0
    name: logstash
    ports:
    - containerPort: 5042
    env:
    - name: ES_HOSTS
      value: "https://eckelastic-es-http:9200"
    - name: ES_USER
      value: "elastic"
    - name: ES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: eckelastic-es-elastic-user
          key: elastic
    resources: {}
    volumeMounts:
    - name: config-volume
      mountPath: /usr/share/logstash/config
    - name: logstash-pipeline-volume
      mountPath: /usr/share/logstash/pipeline
    - name: cert-ca
      mountPath: "/etc/logstash/certificates"
      readOnly: true
  restartPolicy: OnFailure
  volumes:
  - name: config-volume
    configMap:
      name: logstash-configmap
      items:
        - key: logstash.yml
          path: logstash.yml
  - name: logstash-pipeline-volume
    configMap:
      name: logstash-configmap
      items:
        - key: logstash.conf
          path: logstash.conf
  - name: cert-ca
    secret:
      secretName: eckelastic-es-http-certs-public
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: logstash
  name: logstash
  namespace: elastic-system
spec:
  ports:
  - name: "5042"
    port: 5042
    targetPort: 5042
  selector:
    app: logstash
status:
  loadBalancer: {}